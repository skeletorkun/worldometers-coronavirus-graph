<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

<script src="https://code.highcharts.com/maps/highmaps.js"></script>
<script src="https://code.highcharts.com/maps/modules/data.js"></script>
<script src="https://code.highcharts.com/mapdata/custom/world.js"></script>
<script src="https://code.highcharts.com/modules/debugger.js"></script>
<link href="/stylesheets/chart2.css" rel="stylesheet" type="text/css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<div id="container" style="height: 500px; min-width: 310px; max-width: 800px; margin: 0 auto"></div>
<div id="play-controls">
    <button id="play-pause-button" class="fa fa-play" title="play"></button>
    <input id="play-range" type="range" value="0"/>
    <output id="play-output" for="play-range" name="date">Dates</output>
</div>


<script>

  var graphData = <%- graphData %>

    /**
     * Set the slider max value depending on the data array
     */
    $("#play-range").attr({
      "max": graphData.length - 1,
      "min": 0
    });

  var chart;

  // Initiate the chart
  $('#container').highcharts('Map', {

    title: {
      text: 'Total number of cases'
    },

    subtitle: {
      text: 'Per country over time '
    },

    legend: {
      enabled: false
    },

    mapNavigation: {
      enabled: true,
      buttonOptions: {
        verticalAlign: 'bottom'
      }
    },

    series: [{
      name: 'Countries',
      color: '#E0E0E0',
      enableMouseTracking: false,
      mapData: Highcharts.maps['custom/world']
    }, {
      mapData: Highcharts.maps['custom/world'],
      type: 'mapbubble',
      name: 'Total cases',
      joinBy: ['iso-a3', 'cca3'],
      data: graphData[0].data.slice(),
      minSize: 4,
      maxSize: '12%',
      color: '#8ACA2B',
      tooltip: {
        pointFormat: '{point.country}: {point.z}'
      }
    }]
  });

  chart = $('#container').highcharts();

  /**
   * Update the chart. This happens either on updating (moving) the range input,
   * or from a timer when the timeline is playing.
   */
  function update(increment) {
    var input = $('#play-range')[0],
      output = $('#play-output')[0];

    if (increment) {
      input.value = parseInt(input.value) + increment;
    }

    output.innerHTML = graphData[input.value].name; // Output value
    if (input.value >=  parseInt(input.max)) { // Auto-pause
      pause($('#play-pause-button')[0]);
    }
    let data = graphData[input.value].data;
    chart.series[1].setData(data); // Increment dataset (updates chart)
  }

  /**
   * Play the timeline.
   */
  function play(button) {
    button.title = 'pause';
    button.className = 'fa fa-pause';
    chart.sequenceTimer = setInterval(function() {
      update(1);
    }, 500);

  }

  /**
   * Pause the timeline, either when the range is ended, or when clicking the pause button.
   * Pausing stops the timer and resets the button to play mode.
   */
  function pause(button) {
    button.title = 'play';
    button.className = 'fa fa-play';
    clearTimeout(chart.sequenceTimer);
    chart.sequenceTimer = undefined;
  }

  /**
   * Toggle play and pause from the button
   */
  $('#play-pause-button').bind('click', function() {
    if (chart.sequenceTimer === undefined) {
      play(this);
    } else {
      pause(this);
    }
  });

  /**
   * Update the chart when the input is changed
   */
  $('#play-range').bind('input', function() {
    update();
  });


</script>